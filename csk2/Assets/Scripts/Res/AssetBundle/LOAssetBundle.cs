// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
using com.QH.QPGame.GameUtils;

namespace LOAssetFramework
{
	public sealed class LOAssetBundle
	{
        //创建缓存字典
        private Dictionary<string, UnityEngine.Object> assetCache;
        //缓存字典属性
        internal Dictionary<string, UnityEngine.Object> AssetCache
        {
            get
            {
                if (assetCache == null)
                {
                    assetCache = new Dictionary<string, UnityEngine.Object>();
                }

                return assetCache;
            }
        }

        //创建缓存字典
        private Dictionary<string, AssetBundleRequest> assetLoading;
        //缓存字典属性
        internal Dictionary<string, AssetBundleRequest> AssetLoading
        {
            get
            {
                if (assetLoading == null)
                {
                    assetLoading = new Dictionary<string, AssetBundleRequest>();
                }

                return assetLoading;
            }
        }

		internal AssetBundle Bundle;
		internal string 	 Name;

		internal LOAssetBundle(AssetBundle assetBundle,string name)
		{
            this.Bundle = assetBundle;
			this.Name = name;
			this.m_ReferencedCount = 1;
		}
		
		#region ReferenceCountManage

		private int m_ReferencedCount;

		public void Retain()
		{
			this.m_ReferencedCount++;
		}

		public bool Release(bool remoteAll)
        {
			this.m_ReferencedCount--;
            //当引用计数为0时,卸载资源
			if (this.m_ReferencedCount == 0) 
			{
                this.Bundle.Unload(remoteAll);
				//LOAssetCache.FreeBundle(this.Name);
			    return true;
			}

		    return false;
        }
		
		public int RetainCount()
		{
			return this.m_ReferencedCount;
		}


        internal UnityEngine.Object GetAsset(string key)
        {
            UnityEngine.Object obj = null;
            AssetCache.TryGetValue(key, out obj);
            return obj;
        }

        internal void SetAssetCache(string key, UnityEngine.Object obj)
        {
            AssetCache.Add(key, obj);
        }

        internal void AddLoading(string key, AssetBundleRequest req)
        {
            AssetLoading.Add(key, req);
        }

	    internal bool IsLoading(string key)
	    {
            return AssetLoading.ContainsKey(key);
	    }

	    internal void RemoveLoading(string key)
	    {
            if (AssetLoading.ContainsKey(key))
            {
                AssetLoading.Remove(key);
            }
	    }

	    #endregion
		
	}
}

